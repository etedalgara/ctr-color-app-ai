name: Build Android APK (CTR+Pos+Impr+Clicks with Opportunity Labels + AI)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'

      - name: Create Flutter app
        run: |
          flutter --version
          flutter create app --platforms=android --project-name ctr_color_app --org io.ctrcolor

      - name: Write pubspec.yaml
        run: |
          cat > app/pubspec.yaml << 'YAML'
          name: ctr_color_app
          description: CTR/Pos/Impr/Clicks with Opportunity Labels (fa) + per-page AI + Dark Mode
          publish_to: "none"
          version: 2.1.1+23

          environment:
            sdk: ">=3.3.0 <4.0.0"

          dependencies:
            flutter:
              sdk: flutter
            file_picker: ^8.0.0
            excel: ^2.1.0
            share_plus: ^9.0.0
            collection: ^1.18.0
            http: ^1.2.2
            shared_preferences: ^2.2.3
            url_launcher: ^6.3.0

          dev_dependencies:
            flutter_test:
              sdk: flutter

          flutter:
            uses-material-design: true
          YAML

      - name: Write app source (main.dart)
        run: |
          mkdir -p app/lib
          cat > app/lib/main.dart << 'DART'
          import 'dart:convert';
          import 'dart:typed_data';
          import 'package:collection/collection.dart';
          import 'package:excel/excel.dart' as xls;
          import 'package:file_picker/file_picker.dart';
          import 'package:flutter/material.dart';
          import 'package:flutter/services.dart';
          import 'package:share_plus/share_plus.dart';
          import 'package:http/http.dart' as http;
          import 'package:shared_preferences/shared_preferences.dart';
          import 'package:url_launcher/url_launcher.dart';

          void main() => runApp(const CTRColorApp());

          const String _kInjectedProxy = '__AI_PROXY_URL__';
          const String _kFallbackProxy = 'https://ctr-ai-proxy-iwqf.vercel.app/api/analyze';
          String get kAiProxyUrl => _kInjectedProxy.startsWith('http') ? _kInjectedProxy : _kFallbackProxy;

          // ===================== Models =====================
          class PageRow {
            final String text;
            final String ctrRaw;
            final String posRaw;
            final String impRaw;
            final String clkRaw;
            final int rowIndex;
            PageRow({
              required this.text,
              required this.ctrRaw,
              required this.posRaw,
              required this.impRaw,
              required this.clkRaw,
              required this.rowIndex,
            });
          }

          class Benchmark { final double fromPos,toPos,minCTR,maxCTR; Benchmark(this.fromPos,this.toPos,this.minCTR,this.maxCTR); }

          enum ColorClass { redStrong, redLight, gray, greenLight, greenStrong, warn }

          class ResultRow {
            final PageRow row;
            final ColorClass colorClass;
            final Benchmark? bm;
            final String oppLabel;
            ResultRow(this.row,this.colorClass,this.bm,this.oppLabel);
          }

          // ===================== App with ThemeMode + Toggle Button =====================
          class CTRColorApp extends StatefulWidget {
            const CTRColorApp({super.key});
            @override State<CTRColorApp> createState()=>_CTRColorAppState();
          }

          class _CTRColorAppState extends State<CTRColorApp> {
            static const _kPrefsTheme='theme_mode'; // 'system' | 'light' | 'dark'
            ThemeMode _themeMode = ThemeMode.system;

            @override void initState(){ super.initState(); _loadTheme(); }
            Future<void> _loadTheme() async {
              final sp = await SharedPreferences.getInstance();
              final raw = sp.getString(_kPrefsTheme) ?? 'system';
              setState(()=> _themeMode = {
                'light': ThemeMode.light, 'dark': ThemeMode.dark, 'system': ThemeMode.system
              }[raw] ?? ThemeMode.system);
            }
            Future<void> _saveTheme(ThemeMode m) async {
              final sp = await SharedPreferences.getInstance();
              final raw = m==ThemeMode.dark?'dark': m==ThemeMode.light?'light':'system';
              await sp.setString(_kPrefsTheme, raw);
              setState(()=>_themeMode=m);
            }
            void _toggleTheme(){
              final next = _themeMode==ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;
              _saveTheme(next);
            }

            ThemeData _lightTheme(){
              final base = ThemeData(colorScheme: ColorScheme.fromSeed(seedColor: Colors.teal), useMaterial3: true);
              return base.copyWith(
                scaffoldBackgroundColor: const Color(0xFFF7FAF9),
                appBarTheme: base.appBarTheme.copyWith(
                  elevation: 0, backgroundColor: const Color(0xFFE9F5F2),
                  titleTextStyle: const TextStyle(fontWeight: FontWeight.w700, fontSize: 20, color: Colors.teal),
                  iconTheme: const IconThemeData(color: Colors.teal),
                ),
                cardTheme: const CardTheme(
                  margin: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                  elevation: 0,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(18))),
                ),
                chipTheme: base.chipTheme.copyWith(
                  shape: const StadiumBorder(),
                  padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                  labelStyle: const TextStyle(fontWeight: FontWeight.w600, color: Colors.black87),
                ),
                listTileTheme: const ListTileThemeData(
                  contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  titleTextStyle: TextStyle(fontWeight: FontWeight.w700, fontSize: 15),
                  subtitleTextStyle: TextStyle(fontSize: 13),
                ),
                dividerColor: Colors.black12,
              );
            }

            ThemeData _darkTheme(){
              final dark = ThemeData(
                colorScheme: const ColorScheme.dark(
                  primary: Color(0xFF53C1A9),
                  surface: Color(0xFF121416),
                  surfaceVariant: Color(0xFF1C2124),
                  secondary: Color(0xFF79D2BF),
                ),
                useMaterial3: true,
              );
              return dark.copyWith(
                scaffoldBackgroundColor: const Color(0xFF0F1214),
                appBarTheme: dark.appBarTheme.copyWith(
                  elevation: 0, backgroundColor: const Color(0xFF0F1214),
                  titleTextStyle: const TextStyle(fontWeight: FontWeight.w700, fontSize: 20, color: Color(0xFF79D2BF)),
                  iconTheme: const IconThemeData(color: Color(0xFF79D2BF)),
                ),
                cardTheme: const CardTheme(
                  margin: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                  elevation: 0,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(18))),
                ),
                chipTheme: dark.chipTheme.copyWith(
                  shape: const StadiumBorder(),
                  padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                  labelStyle: const TextStyle(fontWeight: FontWeight.w600, color: Colors.white),
                ),
                dividerColor: Colors.white12,
              );
            }

            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'CTR Color App',
                theme: _lightTheme(),
                darkTheme: _darkTheme(),
                themeMode: _themeMode,
                home: HomeScreen(
                  onChangeTheme: _saveTheme,
                  currentTheme: _themeMode,
                  onToggleTheme: _toggleTheme,
                ),
                locale: const Locale('fa'),
              );
            }
          }

          // ===================== HomeScreen =====================
          class HomeScreen extends StatefulWidget {
            final void Function(ThemeMode) onChangeTheme;
            final ThemeMode currentTheme;
            final VoidCallback onToggleTheme;
            const HomeScreen({super.key, required this.onChangeTheme, required this.currentTheme, required this.onToggleTheme});
            @override State<HomeScreen> createState()=>_HomeScreenState();
          }

          class _HomeScreenState extends State<HomeScreen>{
            xls.Excel? _excel; String? _dataSheetName; List<String> _headers=[]; List<List<String>> _table=[];
            int? _colText,_colCTR,_colPos,_colImp,_colClk;
            List<Benchmark> _benchmarks=[]; bool _bmFromSheet=false;
            String? _bmSheetName;
            List<ResultRow> _results=[];

            // prefs
            static const _kPrefsTol='tolerance';
            static const _kPrefsAiUrl='custom_ai_url';
            static const _kPrefsBalance='rank_bias'; // 0..1
            double _tolerance = 0.10;
            String? _customAiUrl;
            double _rankBias = 0.5;

            // UI state
            String _query='';
            Set<ColorClass> _filterBands = {};
            String _sort='posAsc';

            @override void initState(){ super.initState(); _loadPrefs(); }
            Future<void> _loadPrefs() async {
              final sp = await SharedPreferences.getInstance();
              setState((){
                _customAiUrl = sp.getString(_kPrefsAiUrl);
                _tolerance = sp.getDouble(_kPrefsTol) ?? 0.10;
                _rankBias = sp.getDouble(_kPrefsBalance) ?? 0.5;
              });
            }

            // -------- Parsers
            String _normDigits(String s){ const m={'۰':'0','۱':'1','۲':'2','۳':'3','۴':'4','۵':'5','۶':'6','۷':'7','۸':'8','۹':'9','٠':'0','١':'1','٢':'2','٣':'3','٤':'4','٥':'5','٦':'6','٧':'7','٨':'8','٩':'9'}; var o=s; m.forEach((k,v)=>o=o.replaceAll(k,v)); return o; }
            double _num(String v){ try{ var s=_normDigits(v.trim()).replaceAll('%','').replaceAll('٪','').replaceAll(',','').replaceAll('٬','').replaceAll('،','').replaceAll('٫','.'); return double.parse(s);}catch(_){ return double.nan; } }
            double _ctr(String v) => _num(v);
            String _fmt(double x){ if (x.isNaN) return ''; final isInt = x.truncateToDouble()==x; return isInt ? x.toStringAsFixed(0) : x.toStringAsFixed(2); }

            // -------- Excel
            Future<void> _pickExcel() async{
              try{
                setState(()=>{_excel=null,_headers=[],_table=[],_colText=null,_colCTR=null,_colPos=null,_colImp=null,_colClk=null,_benchmarks=[],_bmFromSheet=false,_results=[],_bmSheetName=null});
                final res=await FilePicker.platform.pickFiles(type:FileType.custom,allowedExtensions:['xlsx'],withData:true);
                if(res==null||res.files.isEmpty) return;
                final bytes=res.files.single.bytes; if(bytes==null){ _snack('Failed to read file bytes'); return; }
                final excel = xls.Excel.decodeBytes(bytes); setState(()=>_excel=excel);

                final names=excel.tables.keys.toList();
                final chosen=names.firstWhere((t)=>(excel.tables[t]?.maxRows??0)>0,orElse:()=>names.isNotEmpty?names.first:'');
                if(chosen.isEmpty){ _snack('No sheets found'); return; }
                _dataSheetName = chosen;

                _loadTable(); _loadBenchmarks(excel); _autoMap();
              } catch(e){ _snack('Excel load error: $e'); }
            }

            void _loadTable(){
              final sh=_excel!.tables[_dataSheetName]!; _headers=[]; _table=[];
              for(var r=0;r<sh.maxRows;r++){
                final row=<String>[];
                for(var c=0;c<sh.maxCols;c++){
                  final cell = sh.cell(xls.CellIndex.indexByColumnRow(columnIndex:c,rowIndex:r)).value;
                  row.add('${cell??''}'.trim());
                }
                if(r==0) _headers=row; else _table.add(row);
              }
            }

            void _loadBenchmarks(xls.Excel excel){
              _bmFromSheet=false; final bm=excel.tables['Benchmarks'];
              if(bm==null||bm.maxRows<2){ _benchmarks=[]; _bmSheetName=null; return; }
              final rows=bm.maxRows, cols=bm.maxCols; final list=<Benchmark>[];
              for(var r=1;r<rows;r++){
                String a='',b='',c='',d='';
                if(cols>0)a='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:0,rowIndex:r)).value??''}';
                if(cols>1)b='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:1,rowIndex:r)).value??''}';
                if(cols>2)c='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:2,rowIndex:r)).value??''}';
                if(cols>3)d='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:3,rowIndex:r)).value??''}';
                final fp=_num(a), tp=_num(b), mn=_num(c), mx=_num(d);
                if(fp.isNaN||tp.isNaN||mn.isNaN||mx.isNaN) continue;
                list.add(Benchmark(fp,tp,mn,mx));
              }
              if(list.isNotEmpty){ _benchmarks=list; _bmFromSheet=true; _bmSheetName='Benchmarks (same workbook)'; }
            }

            void _autoMap(){
              int? find(List<String> keys){
                for(var i=0;i<_headers.length;i++){
                  final h=_headers[i].toLowerCase();
                  for(final k in keys){ if(h.contains(k)) return i; }
                }
                return null;
              }
              _colText = find(['url','address','page','landing','slug','title']) ?? 0;
              _colCTR  = find(['ctr','click-through','clickthrough']) ?? (_headers.length>1?1:null);
              _colPos  = find(['position','avg position','rank']) ?? (_headers.length>2?2:null);
              _colImp  = find(['impr','impression','impressions','imps','نمایش','ایمپرشن']);
              _colClk  = find(['click','clicks','کلیک']);
              setState((){});
            }

            List<String> _validateData() {
              final issues = <String>[];
              if (_headers.isEmpty) issues.add('No data sheet loaded.');
              if (_colText == null || _colCTR == null || _colPos == null || _colImp == null || _colClk == null) {
                issues.add('Please map all five columns (Text/CTR/Position/Impressions/Clicks).');
                return issues;
              }
              var badCtr = 0, badPos = 0, badImp = 0, badClk = 0;
              for (var i = 0; i < _table.length; i++) {
                final row = _table[i];
                final t = _colText! < row.length ? row[_colText!] : '';
                final c = _colCTR!  < row.length ? row[_colCTR!]  : '';
                final p = _colPos!  < row.length ? row[_colPos!]  : '';
                final im = _colImp! < row.length ? row[_colImp!]  : '';
                final ck = _colClk! < row.length ? row[_colClk!]  : '';
                final ctr = _ctr(c), pos = _num(p), imp = _num(im), clk = _num(ck);
                if (t.trim().isEmpty) issues.add('Row ${i+2}: empty Text/URL');
                if (ctr.isNaN) badCtr++; if (pos.isNaN) badPos++; if (imp.isNaN) badImp++; if (clk.isNaN) badClk++;
              }
              if (badCtr > 0) issues.add('Invalid CTR in $badCtr row(s).');
              if (badPos > 0) issues.add('Invalid Position in $badPos row(s).');
              if (badImp > 0) issues.add('Invalid Impressions in $badImp row(s).');
              if (badClk > 0) issues.add('Invalid Clicks in $badClk row(s).');
              if (_benchmarks.isEmpty) issues.add('Benchmarks are missing. Add a "Benchmarks" sheet.');
              return issues;
            }

            // -------- Band color
            Color _bandColor(ColorClass c){
              final isDark = Theme.of(context).brightness==Brightness.dark;
              switch(c){
                case ColorClass.redStrong:   return isDark? const Color(0xFF5E2B2B) : const Color(0xFFFFCDD2);
                case ColorClass.redLight:    return isDark? const Color(0xFF6B3B3B) : const Color(0xFFFFEBEE);
                case ColorClass.gray:        return isDark? const Color(0xFF2A2F33) : const Color(0xFFECEFF1);
                case ColorClass.greenLight:  return isDark? const Color(0xFF23493B) : const Color(0xFFB7E4C7);
                case ColorClass.greenStrong: return isDark? const Color(0xFF1F4B3F) : const Color(0xFF9BE7C4);
                case ColorClass.warn:        return isDark? const Color(0xFF5A4A1E) : const Color(0xFFFFEBA0);
              }
            }

            // -------- CTR banding
            ColorClass _classify(double ctr, Benchmark bm){
              final tol = _tolerance; final minT=bm.minCTR, maxT=bm.maxCTR;
              final minStrong = minT * (1 - tol);
              final maxStrong = maxT * (1 + tol);
              if (ctr < minStrong) return ColorClass.redStrong;
              if (ctr < minT)     return ColorClass.redLight;
              if (ctr <= maxT)    return ColorClass.gray;
              if (ctr <= maxStrong) return ColorClass.greenLight;
              return ColorClass.greenStrong;
            }

            double _posAdv(double pos) => (pos > 0 && pos <= 10) ? (10 - pos) / 9.0 : 0.0;

            // -------- Opportunity score (Hybrid)
            double _oppScore({
              required double ctr,
              required Benchmark bm,
              required double pos,
              required double impr,
              required double wCtr,
              required double wRank,
              int maxPos = 10,
            }){
              final ctrExpected = (bm.minCTR + bm.maxCTR) / 2.0;
              final gap = ctrExpected - ctr;
              final ctrPart = gap > 0 ? wCtr * (gap / ctrExpected) * impr : 0.0;
              final posPart = (pos > 0 && pos <= maxPos) ? wRank * ((maxPos - pos) / maxPos) * impr : 0.0;
              return ctrPart + posPart;
            }

            String _oppLabel({
              required double score,
              required double posAdv,
              required double p60,
              required double p80,
              required bool hasBenchmark,
              required bool gapPositive,
            }){
              if(!hasBenchmark) return 'Needs Benchmark';
              if(!gapPositive) return 'Protect Top';
              if (score >= p80) return posAdv >= 0.6 ? 'Quick Win' : 'High Opportunity';
              if (score >= p60) return 'Moderate Growth';
              return 'Low Potential';
            }

            double _percentile(List<double> data, double p){
              if (data.isEmpty) return 0.0;
              final list = [...data]..sort();
              final pos = (p/100.0) * (list.length - 1);
              final lo = pos.floor();
              final hi = pos.ceil();
              if (lo==hi) return list[lo];
              final frac = pos - lo;
              return list[lo] + (list[hi]-list[lo]) * frac;
            }

            // -------- Labels color/icon
            Color _labelColor(String lbl){
              final isDark = Theme.of(context).brightness==Brightness.dark;
              switch (lbl) {
                case 'Quick Win': return isDark? const Color(0xFF2E7D32) : const Color(0xFF2E7D32);
                case 'High Opportunity': return const Color(0xFF1E88E5);
                case 'Moderate Growth': return const Color(0xFFFB8C00);
                case 'Low Potential': return const Color(0xFF8D6E63);
                case 'Protect Top': return const Color(0xFF00796B);
                default: return Colors.grey.shade700;
              }
            }
            IconData _labelIcon(String lbl){
              switch (lbl) {
                case 'Quick Win': return Icons.bolt;
                case 'High Opportunity': return Icons.trending_up;
                case 'Moderate Growth': return Icons.trending_flat;
                case 'Low Potential': return Icons.trending_down;
                case 'Protect Top': return Icons.shield;
                default: return Icons.info_outline;
              }
            }

            // -------- KPI chip (خوانا)
            Widget _kpiChip(BuildContext context, String label, String value) {
              final cs = Theme.of(context).colorScheme;
              final isDark = Theme.of(context).brightness==Brightness.dark;
              return Chip(
                label: Row(mainAxisSize: MainAxisSize.min, children: [
                  Text('$label: ', style: TextStyle(fontWeight: FontWeight.w600, color: cs.onSurface)),
                  Text(value, style: TextStyle(color: cs.onSurface)),
                ]),
                backgroundColor: isDark ? cs.surfaceVariant.withOpacity(0.35) : Colors.white,
                side: BorderSide(color: cs.outline.withOpacity(0.3)),
              );
            }

            // -------- Page card (path متن خوانا در لایت/دارک)
            Widget _pageCard(ResultRow r){
              final uri = Uri.tryParse(r.row.text);
              final host = uri?.host.isNotEmpty == true ? uri!.host : r.row.text;
              final path = (uri != null && uri.path.isNotEmpty) ? Uri.decodeFull(uri.path) : '';
              final c = _ctr(r.row.ctrRaw);
              final p = _num(r.row.posRaw);
              final im = _num(r.row.impRaw);
              final ck = _num(r.row.clkRaw);
              final bg = _bandColor(r.colorClass);
              final isDark = Theme.of(context).brightness==Brightness.dark;
              final pathColor = isDark ? Colors.white.withOpacity(0.85) : Colors.black87; // <-- خوانایی

              return Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topRight, end: Alignment.bottomLeft,
                    colors: [bg.withOpacity(0.88), bg],
                  ),
                  borderRadius: const BorderRadius.all(Radius.circular(18)),
                  border: Border.all(color: Theme.of(context).dividerColor),
                  boxShadow: const [BoxShadow(color: Color(0x14000000), blurRadius: 8, offset: Offset(0, 4))],
                ),
                margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                padding: const EdgeInsets.fromLTRB(14, 14, 14, 10),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    SelectableText.rich(
                      TextSpan(children: [
                        TextSpan(text: host, style: const TextStyle(fontWeight: FontWeight.w800, fontSize: 16)),
                        if (path.isNotEmpty) const TextSpan(text: '  '),
                        if (path.isNotEmpty) TextSpan(text: path, style: TextStyle(color: pathColor)),
                      ]),
                      textDirection: TextDirection.ltr,
                    ),
                    const SizedBox(height: 10),
                    Wrap(
                      spacing: 8, runSpacing: 8,
                      children: [
                        _kpiChip(context,'CTR', _fmt(c)),
                        _kpiChip(context,'Position', _fmt(p)),
                        _kpiChip(context,'Impr', _fmt(im)),
                        _kpiChip(context,'Clicks', _fmt(ck)),
                        Chip(
                          avatar: Icon(_labelIcon(r.oppLabel), size: 18, color: Colors.white),
                          label: Text('Opportunity: ${r.oppLabel}', style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w700)),
                          backgroundColor: _labelColor(r.oppLabel),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        IconButton(tooltip:'Open', icon: const Icon(Icons.open_in_new_rounded), onPressed: () async{
                          final u = Uri.tryParse(r.row.text);
                          if(u!=null) await launchUrl(u, mode: LaunchMode.externalApplication);
                        }),
                        const SizedBox(width: 4),
                        IconButton(tooltip:'Copy', icon: const Icon(Icons.copy_rounded), onPressed: () async {
                          await Clipboard.setData(ClipboardData(text: r.row.text));
                          _snack('لینک کپی شد');
                        }),
                        const SizedBox(width: 4),
                        IconButton(tooltip:'Analyze', icon: const Icon(Icons.insights_rounded), onPressed: ()=>_analyzeOne(r)),
                        const Spacer(),
                      ],
                    ),
                  ],
                ),
              );
            }

            // -------- Compute
            void _compute(){
              final issues = _validateData();
              if (issues.isNotEmpty){ _showIssues(issues); return; }

              final wRank = _rankBias.clamp(0.0, 1.0);
              final wCtr  = (1.0 - _rankBias).clamp(0.0, 1.0);

              final tempScores = <double>[];
              final tempRows = <Map<String,dynamic>>[];

              for(var i=0;i<_table.length;i++){
                final row=_table[i];
                if(_colText!>=row.length||_colCTR!>=row.length||_colPos!>=row.length||_colImp!>=row.length||_colClk!>=row.length) continue;

                final text=row[_colText!], cRaw=row[_colCTR!], pRaw=row[_colPos!], iRaw=row[_colImp!], kRaw=row[_colClk!];
                final ctr=_ctr(cRaw), pos=_num(pRaw), impr=_num(iRaw), clk=_num(kRaw);

                Benchmark? bm;
                if(!ctr.isNaN && !pos.isNaN){
                  bm=_benchmarks.firstWhereOrNull((b)=>pos>=b.fromPos&&pos<=b.toPos);
                }

                double score=0.0;
                bool gapPositive=false;
                if(bm!=null && !ctr.isNaN && !pos.isNaN && !impr.isNaN){
                  final ctrExpected=(bm.minCTR+bm.maxCTR)/2.0;
                  gapPositive = (ctrExpected - ctr) > 0;
                  score = _oppScore(
                    ctr: ctr, bm: bm, pos: pos, impr: impr,
                    wCtr: wCtr, wRank: wRank, maxPos: 10
                  );
                }

                tempRows.add({
                  'text':text,'cRaw':cRaw,'pRaw':pRaw,'iRaw':iRaw,'kRaw':kRaw,
                  'ctr':ctr,'pos':pos,'impr':impr,'clk':clk,'bm':bm,'score':score,'gapPositive':gapPositive,'rowIndex':i+2
                });
                if(score>0) tempScores.add(score);
              }

              final p60 = _percentile(tempScores, 60);
              final p80 = _percentile(tempScores, 80);

              final out=<ResultRow>[];
              for(final m in tempRows){
                final bm = m['bm'] as Benchmark?;
                final ctr = m['ctr'] as double;
                final pos = m['pos'] as double;
                final score = m['score'] as double;
                final gapPositive = m['gapPositive'] as bool;

                ColorClass band;
                String label;

                if(bm==null || ctr.isNaN || pos.isNaN){
                  band = ColorClass.warn;
                  label = 'Needs Benchmark';
                }else{
                  band = _classify(ctr,bm);
                  label = _oppLabel(
                    score: score,
                    posAdv: _posAdv(pos),
                    p60: p60, p80: p80,
                    hasBenchmark: true,
                    gapPositive: gapPositive,
                  );
                }

                out.add(ResultRow(
                  PageRow(
                    text: m['text'], ctrRaw: m['cRaw'], posRaw: m['pRaw'], impRaw: m['iRaw'], clkRaw: m['kRaw'], rowIndex: m['rowIndex'] as int
                  ),
                  band, bm, label
                ));
              }

              setState(()=>_results=out);
            }

            // -------- Filter chips (بدون تغییر اندازه در حالت انتخاب)
            Color _bandChipBase(ColorClass? band){
              switch(band){
                case null: return Colors.blueGrey.shade400;
                case ColorClass.redStrong: return Colors.red.shade400;
                case ColorClass.redLight: return Colors.pink.shade300;
                case ColorClass.gray: return Colors.grey.shade500;
                case ColorClass.greenLight: return Colors.lightGreen.shade500;
                case ColorClass.greenStrong: return Colors.green.shade600;
                case ColorClass.warn: return Colors.orange.shade500;
              }
            }
            Widget _filtersGrid(BuildContext context, List<MapEntry<String, ColorClass?>> items){
              return Wrap(
                spacing: 8, runSpacing: 8,
                children: items.map((e){
                  final band = e.value;
                  final selected = band==null ? _filterBands.isEmpty : _filterBands.contains(band);
                  final baseColor = _bandChipBase(band);
                  return FilterChip(
                    label: Text(e.key),
                    selected: selected,
                    onSelected: (_){
                      setState(() {
                        if (band == null) { _filterBands.clear(); }
                        else {
                          if (_filterBands.contains(band)) _filterBands.remove(band);
                          else _filterBands.add(band);
                        }
                      });
                    },
                    showCheckmark: false,
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    labelStyle: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
                    selectedLabelStyle: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
                    materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                    visualDensity: const VisualDensity(horizontal: -2, vertical: -2),
                    backgroundColor: baseColor.withOpacity(0.6),
                    selectedColor: baseColor,
                    side: BorderSide(color: baseColor.withOpacity(0.0)),
                    shape: const StadiumBorder(),
                  );
                }).toList(),
              );
            }

            // -------- Helpers
            void _showIssues(List<String> issues){
              showDialog(context: context, builder: (_){
                return Directionality(textDirection: TextDirection.rtl, child: AlertDialog(
                  title: const Text('ایرادهای داده'),
                  content: SizedBox(width:520,child: SingleChildScrollView(child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: issues.map((e)=>Text('• $e')).toList(),))),
                  actions:[TextButton(onPressed: ()=>Navigator.pop(context), child: const Text('باشه'))],
                ));
              });
            }
            void _snack(String m)=>ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(m)));

            Future<void> _analyzeOne(ResultRow r) async {
              final String aiUrl = (_customAiUrl?.isNotEmpty==true) ? _customAiUrl! : kAiProxyUrl;
              if (!aiUrl.startsWith('http')) { _snack('AI endpoint is not configured.'); return; }

              final c=_ctr(r.row.ctrRaw), p=_num(r.row.posRaw);
              final band = {
                ColorClass.redStrong: 'redStrong',
                ColorClass.redLight: 'redLight',
                ColorClass.gray: 'gray',
                ColorClass.greenLight: 'greenLight',
                ColorClass.greenStrong: 'greenStrong',
                ColorClass.warn: 'warn',
              }[r.colorClass];

              final payload = {
                "mode":"single",
                "meta":{"datasetName": _dataSheetName ?? "dataset"},
                "settings":{"tolerance": _tolerance, "rankBias": _rankBias},
                "benchmarks": r.bm==null?[]:[{"from":r.bm!.fromPos,"to":r.bm!.toPos,"min":r.bm!.minCTR,"max":r.bm!.maxCTR}],
                "page":{
                  "url": r.row.text,
                  "posRaw": r.row.posRaw,
                  "ctrRaw": r.row.ctrRaw,
                  "imprRaw": r.row.impRaw,
                  "clicksRaw": r.row.clkRaw,
                  "pos": p,
                  "ctr": c,
                  "impr": _num(r.row.impRaw),
                  "clicks": _num(r.row.clkRaw),
                  "band": band,
                  "opportunityLabel": r.oppLabel
                }
              };

              showDialog(context: context, barrierDismissible: false, builder: (_)=>const Center(child:CircularProgressIndicator()));
              String? lastErr;
              try{
                final res = await http.post(Uri.parse(aiUrl), headers:{'Content-Type':'application/json'}, body: jsonEncode(payload)).timeout(const Duration(seconds:60));
                if(res.statusCode==200){
                  final raw = jsonDecode(res.body);
                  final text = (raw is Map && raw["summaryText"] is String) ? raw["summaryText"] as String : '';
                  if(mounted) Navigator.of(context).pop();
                  _showAiSheet(title:'تحلیل صفحه', text:text.isEmpty?'—':text);
                  return;
                }else{ lastErr='AI HTTP ${res.statusCode}: ${res.body}'; }
              }catch(e){ lastErr='Network/timeout: $e'; }
              if(mounted){ Navigator.of(context).pop(); _snack(lastErr ?? 'AI request failed.'); }
            }

            void _showAiSheet({required String title, required String text}){
              showModalBottomSheet(context: context, isScrollControlled: true, builder: (_){
                return Directionality(textDirection: TextDirection.rtl, child: Padding(
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: DraggableScrollableSheet(
                    expand: false, initialChildSize: 0.7, minChildSize: 0.5, maxChildSize: 0.95,
                    builder: (_,ctrl)=>Container(
                      padding: const EdgeInsets.fromLTRB(16,12,16,16),
                      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                        Row(children:[
                          Expanded(child: Text(title, style: Theme.of(context).textTheme.titleLarge)),
                          IconButton(onPressed: ()=>Navigator.pop(context), icon: const Icon(Icons.close))
                        ]),
                        const Divider(),
                        Expanded(child: SingleChildScrollView(controller: ctrl, child: SelectableText(text, textAlign: TextAlign.justify))),
                        const SizedBox(height:8),
                        Row(mainAxisAlignment: MainAxisAlignment.end, children: [
                          TextButton.icon(onPressed: () async{
                            final bytes = Uint8List.fromList(utf8.encode(text));
                            await Share.shareXFiles([XFile.fromData(bytes, name:'page_analysis.txt', mimeType:'text/plain')], text:'AI analysis');
                          }, icon: const Icon(Icons.ios_share), label: const Text('اشتراک')),
                        ])
                      ]),
                    ),
                  ),
                ));
              });
            }

            // -------- UI
            @override Widget build(BuildContext context){
              final rS=_results.where((r)=>r.colorClass==ColorClass.redStrong).length;
              final rL=_results.where((r)=>r.colorClass==ColorClass.redLight).length;
              final gL=_results.where((r)=>r.colorClass==ColorClass.greenLight).length;
              final gS=_results.where((r)=>r.colorClass==ColorClass.greenStrong).length;
              final gr=_results.where((r)=>r.colorClass==ColorClass.gray).length;
              final wn=_results.where((r)=>r.colorClass==ColorClass.warn).length;

              final filters = <MapEntry<String, ColorClass?>>[
                MapEntry('All (${_results.length})', null),
                MapEntry('Worst ($rS)', ColorClass.redStrong),
                MapEntry('Bad ($rL)', ColorClass.redLight),
                MapEntry('Neutral ($gr)', ColorClass.gray),
                MapEntry('Good ($gL)', ColorClass.greenLight),
                MapEntry('Best ($gS)', ColorClass.greenStrong),
                MapEntry('Warn ($wn)', ColorClass.warn),
              ];

              List<ResultRow> visible() {
                var list = _results.where((r){
                  final matchQuery = _query.isEmpty || r.row.text.toLowerCase().contains(_query.toLowerCase());
                  final matchBand  = _filterBands.isEmpty || _filterBands.contains(r.colorClass);
                  return matchQuery && matchBand;
                }).toList();

                list.sort((a,b){
                  final ca=_ctr(a.row.ctrRaw), cb=_ctr(b.row.ctrRaw);
                  final pa=_num(a.row.posRaw), pb=_num(b.row.posRaw);
                  final ia=_num(a.row.impRaw), ib=_num(b.row.impRaw);
                  final ka=_num(a.row.clkRaw), kb=_num(b.row.clkRaw);
                  switch(_sort){
                    case 'posAsc':  return pa.compareTo(pb);
                    case 'posDesc': return pb.compareTo(pa);
                    case 'ctrAsc':  return ca.compareTo(cb);
                    case 'ctrDesc': return cb.compareTo(ca);
                    case 'impAsc':  return ia.compareTo(ib);
                    case 'impDesc': return ib.compareTo(ia);
                    case 'clkAsc':  return ka.compareTo(kb);
                    case 'clkDesc': return kb.compareTo(ka);
                  }
                  return 0;
                });
                return list;
              }

              final _visible = visible();

              return Scaffold(
                appBar: AppBar(
                  title: const Text('CTR Color App'),
                  actions: [
                    IconButton(
                      tooltip: 'Toggle Dark/Light',
                      onPressed: widget.onToggleTheme,
                      icon: Icon(Theme.of(context).brightness==Brightness.dark ? Icons.light_mode_outlined : Icons.dark_mode_outlined),
                    ),
                    IconButton(onPressed:_openSettings, icon: const Icon(Icons.settings)),
                  ],
                ),
                body: Padding(
                  padding: const EdgeInsets.all(12),
                  child: ListView(children:[
                    Row(children: [
                      ElevatedButton.icon(onPressed:_pickExcel,icon:const Icon(Icons.upload_file),label:const Text('Import Excel (.xlsx)')),
                      const SizedBox(width:12),
                      ElevatedButton.icon(onPressed:_compute,icon:const Icon(Icons.color_lens),label:const Text('Analyze Data')),
                    ]),
                    const SizedBox(height:12),

                    Row(children:[
                      Expanded(child: TextField(
                        decoration: const InputDecoration(prefixIcon: Icon(Icons.search), hintText: 'جستجو در URL/Title', border: OutlineInputBorder()),
                        onChanged:(v)=>setState(()=>_query=v),
                      )),
                      const SizedBox(width:12),
                      DropdownButton<String>(
                        value: _sort,
                        underline: const SizedBox.shrink(),
                        items: const [
                          DropdownMenuItem(value:'posAsc',  child: Text('Pos ↑')),
                          DropdownMenuItem(value:'posDesc', child: Text('Pos ↓')),
                          DropdownMenuItem(value:'ctrAsc',  child: Text('CTR ↑')),
                          DropdownMenuItem(value:'ctrDesc', child: Text('CTR ↓')),
                          DropdownMenuItem(value:'impAsc',  child: Text('Impr ↑')),
                          DropdownMenuItem(value:'impDesc', child: Text('Impr ↓')),
                          DropdownMenuItem(value:'clkAsc',  child: Text('Clicks ↑')),
                          DropdownMenuItem(value:'clkDesc', child: Text('Clicks ↓')),
                        ],
                        onChanged:(v)=>setState(()=>_sort=v??'posAsc'),
                      ),
                    ]),
                    const SizedBox(height:10),

                    _filtersGrid(context, filters),
                    const SizedBox(height:8),

                    if(_excel==null)
                      Padding(
                        padding: const EdgeInsets.all(4),
                        child: Center(
                          child: Text.rich(
                            TextSpan(children: [
                              const TextSpan(text: 'ابتدا فایل اکسل را وارد و دکمه '),
                              WidgetSpan(alignment: PlaceholderAlignment.baseline, baseline: TextBaseline.alphabetic,
                                child: Directionality(textDirection: TextDirection.ltr, child: const Text('Analyze Data'))),
                              const TextSpan(text: ' را اجرا کنید.'),
                            ]),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ),

                    if(_excel!=null && _results.isEmpty) const Padding(
                      padding: EdgeInsets.only(top:16),
                      child: Center(child: Text('فایل وارد شد. اکنون Analyze Data را اجرا کنید.')),
                    ),

                    if(_results.isNotEmpty) ListView.builder(
                      shrinkWrap:true, physics:const NeverScrollableScrollPhysics(),
                      itemCount:_visible.length,
                      itemBuilder:(ctx,i)=>_pageCard(_visible[i]),
                    ),
                    const SizedBox(height:12),
                    Text('Tolerance: ${(_tolerance*100).toStringAsFixed(0)}%'),
                  ]),
                ),
              );
            }

            // -------- Settings dialog (بدون بخش Theme)
            void _openSettings(){
              final ctrl = TextEditingController(text: _customAiUrl ?? '');
              showDialog(context: context, builder: (_){
                return Directionality(textDirection: TextDirection.rtl, child: StatefulBuilder(
                  builder: (ctx, setS) {
                    final wRank = _rankBias;
                    final wCTR = 1.0 - _rankBias;
                    return AlertDialog(
                      title: const Text('تنظیمات'),
                      content: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [
                        const Text('آدرس سرویس هوش مصنوعی (خالی = پیش‌فرض):'),
                        const SizedBox(height:8),
                        TextField(controller: ctrl, decoration: const InputDecoration(border: OutlineInputBorder(), hintText:'https://your-proxy.vercel.app/api/analyze')),
                        const SizedBox(height:12),
                        const Text('تلورانس رنگ‌بندی CTR (۰ تا ۵۰٪)', style: TextStyle(fontSize: 12)),
                        Slider(value: _tolerance, min:0, max:0.5, divisions:50, label:'${(_tolerance*100).toStringAsFixed(0)}%', onChanged:(v)=> setS(()=>_tolerance=v)),
                        Text('Tolerance: ${(_tolerance*100).toStringAsFixed(0)}%'),
                        const SizedBox(height:16),
                        const Divider(),
                        const SizedBox(height:8),
                        Row(children:[const Text('CTR Optimization'), const Spacer(), Text('${(wCTR*100).toStringAsFixed(0)}%')]),
                        Slider(
                          value: _rankBias, min: 0, max: 1, divisions: 20,
                          label: _rankBias<0.5 ? 'CTR-focused' : (_rankBias>0.5 ? 'Rank-focused' : 'Balanced'),
                          onChanged: (v)=> setS(()=>_rankBias=v),
                        ),
                        Row(children:[const Text('Rank Growth'), const Spacer(), Text('${(wRank*100).toStringAsFixed(0)}%')]),
                      ]),
                      actions: [
                        TextButton(onPressed: ()=>Navigator.pop(context), child: const Text('Cancel')),
                        TextButton(onPressed: () async {
                          final sp=await SharedPreferences.getInstance();
                          final v=ctrl.text.trim();
                          if(v.isEmpty){ await sp.remove(_kPrefsAiUrl); setState(()=>_customAiUrl=null); }
                          else { await sp.setString(_kPrefsAiUrl, v); setState(()=>_customAiUrl=v); }
                          await sp.setDouble(_kPrefsTol, _tolerance);
                          await sp.setDouble(_kPrefsBalance, _rankBias);
                          if(mounted) setState((){});
                          Navigator.pop(context);
                        }, child: const Text('Save'))
                      ],
                    );
                  },
                ));
              });
            }
          }

          class ListToCsvConverter{ const ListToCsvConverter(); String convert(List<List<String>> rows){ final b=StringBuffer(); for(final r in rows){ b.writeln(r.map(_e).join(',')); } return b.toString(); }
            String _e(String s){ final n=s.contains(',')||s.contains('"')||s.contains('\\n')||s.contains('\\r'); if(!n) return s; final esc=s.replaceAll('"','""'); return '"$esc"'; } }
          DART

      - name: Inject AI URL safely
        env:
          AI_PROXY_URL: ${{ secrets.AI_PROXY_URL }}
        run: |
          URL="${AI_PROXY_URL}"
          URL_ESC=$(printf '%s' "$URL" | sed -e 's/[\/&]/\\&/g')
          sed -i "s|__AI_PROXY_URL__|$URL_ESC|g" app/lib/main.dart
          echo "Injected URL: ${URL:-<empty>}"

      - name: Ensure INTERNET permission
        run: |
          MANIFEST=app/android/app/src/main/AndroidManifest.xml
          grep -q 'android.permission.INTERNET' "$MANIFEST" || \
            sed -i 's|<application|<uses-permission android:name="android.permission.INTERNET"/>\n    <application|g' "$MANIFEST"

      # Use Flutter's default Kotlin/AGP versions (no manual pinning)

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: true

      - name: Gradle warmup (retry)
        working-directory: app/android
        shell: bash
        run: |
          set -euo pipefail
          attempts=0
          until ./gradlew --no-daemon help; do
            attempts=$((attempts+1))
            if [ $attempts -ge 3 ]; then
              echo "Gradle warmup failed after $attempts attempts."
              exit 1
            }
            echo "Retrying Gradle warmup in 20s ($attempts/3)..."
            sleep 20
          done

      - name: Flutter pub get
        working-directory: app
        run: flutter pub get

      - name: Build APK (release) with retry (fail if all attempts fail)
        working-directory: app
        shell: bash
        run: |
          set -euo pipefail
          attempts=0
          LOGFILE=build_apk_full.log
          until flutter build apk --release -v 2>&1 | tee "$LOGFILE"; do
            attempts=$((attempts+1))
            if [ $attempts -ge 3 ]; then
              echo "Build failed after $attempts attempts."
              echo "== Last 300 lines of flutter/gradle log =="
              tail -n 300 "$LOGFILE" || true
              echo "== Build dir tree =="
              ls -R build || true
              exit 1
            fi
            echo "Retrying build in 20s ($attempts/3)..."
            sleep 20
          done
          echo "== Build outputs (tree) =="
          ls -R build || true

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apks
          path: |
            app/build/**/outputs/flutter-apk/*release*.apk
            app/build/**/outputs/apk/release/*release*.apk
          if-no-files-found: error
          retention-days: 7
