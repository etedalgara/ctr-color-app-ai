name: Build Android APK (raw CTR + 5 bands + per-page AI)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'

      - name: Create Flutter app
        run: |
          flutter --version
          flutter create app --platforms=android --project-name ctr_color_app --org io.ctrcolor

      - name: Write pubspec.yaml
        run: |
          cat > app/pubspec.yaml << 'YAML'
          name: ctr_color_app
          description: CTR colorizer (raw numbers, 5 bands by tolerance) + per-page AI (fa)
          publish_to: "none"
          version: 1.5.0+11

          environment:
            sdk: ">=3.3.0 <4.0.0"

          dependencies:
            flutter:
              sdk: flutter
            file_picker: ^8.0.0
            excel: ^2.1.0
            share_plus: ^9.0.0
            collection: ^1.18.0
            http: ^1.2.2
            shared_preferences: ^2.2.3
            url_launcher: ^6.3.0

          dev_dependencies:
            flutter_test:
              sdk: flutter

          flutter:
            uses-material-design: true
          YAML

      - name: Write app source (main.dart)
        run: |
          mkdir -p app/lib
          cat > app/lib/main.dart << 'DART'
          import 'dart:convert';
          import 'dart:typed_data';
          import 'package:collection/collection.dart';
          import 'package:excel/excel.dart' as xls;
          import 'package:file_picker/file_picker.dart';
          import 'package:flutter/material.dart';
          import 'package:share_plus/share_plus.dart';
          import 'package:http/http.dart' as http;
          import 'package:shared_preferences/shared_preferences.dart';
          import 'package:url_launcher/url_launcher.dart';

          void main() => runApp(const CTRColorApp());

          // AI endpoint (injected or fallback)
          const String _kInjectedProxy = '__AI_PROXY_URL__';
          const String _kFallbackProxy = 'https://ctr-ai-proxy-iwqf.vercel.app/api/analyze';
          String get kAiProxyUrl => _kInjectedProxy.startsWith('http') ? _kInjectedProxy : _kFallbackProxy;

          // ---------- Models ----------
          class PageRow { final String text; final String ctrRaw; final String posRaw; final int rowIndex;
            PageRow({required this.text, required this.ctrRaw, required this.posRaw, required this.rowIndex}); }
          class Benchmark { final double fromPos,toPos,minCTR,maxCTR; Benchmark(this.fromPos,this.toPos,this.minCTR,this.maxCTR); }

          // 5 bands + warn
          enum ColorClass { redStrong, redLight, gray, greenLight, greenStrong, warn }
          class ResultRow { final PageRow row; final ColorClass colorClass; final Benchmark? bm; ResultRow(this.row,this.colorClass,this.bm); }

          class CTRColorApp extends StatelessWidget {
            const CTRColorApp({super.key});
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'CTR Color App',
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.teal),
                  useMaterial3: true,
                ),
                home: const HomeScreen(),
                locale: const Locale('fa'),
              );
            }
          }

          class HomeScreen extends StatefulWidget { const HomeScreen({super.key}); @override State<HomeScreen> createState()=>_HomeScreenState(); }
          class _HomeScreenState extends State<HomeScreen>{
            // Excel state
            xls.Excel? _excel; String? _dataSheetName; List<String> _headers=[]; List<List<String>> _table=[];
            int? _colText,_colCTR,_colPos; List<Benchmark> _benchmarks=[]; bool _bmFromSheet=false; List<ResultRow> _results=[];
            String? _bmSheetName;

            // Tolerance (0..0.5) persisted
            static const _kPrefsTol='tolerance';
            double _tolerance = 0.10;

            // AI state
            String? _customAiUrl; static const _kPrefsAiUrl='custom_ai_url';

            // UI state (search / filter / sort)
            String _query=''; Set<ColorClass> _filterBands = {}; String _sort='posAsc';

            @override void initState(){ super.initState(); _loadPrefs(); }
            Future<void> _loadPrefs() async {
              final sp = await SharedPreferences.getInstance();
              setState((){
                _customAiUrl = sp.getString(_kPrefsAiUrl);
                _tolerance = sp.getDouble(_kPrefsTol) ?? 0.10;
              });
            }

            // -------- number parsing (RAW; no percent logic) --------
            String _normDigits(String s){ const m={'۰':'0','۱':'1','۲':'2','۳':'3','۴':'4','۵':'5','۶':'6','۷':'7','۸':'8','۹':'9','٠':'0','١':'1','٢':'2','٣':'3','٤':'4','٥':'5','٦':'6','٧':'7','٨':'8','٩':'9'}; var o=s; m.forEach((k,v)=>o=o.replaceAll(k,v)); return o; }
            double _num(String v){ try{ var s=_normDigits(v.trim()).replaceAll('%','').replaceAll('٪','').replaceAll(',','').replaceAll('٬','').replaceAll('،','').replaceAll('٫','.'); return double.parse(s);}catch(_){ return double.nan; } }
            double _ctr(String v) => _num(v);

            // format: int = 0 decimals; fractional = 2 decimals
            String _fmt(double x){ if (x.isNaN) return ''; final isInt = x.truncateToDouble()==x; return isInt ? x.toStringAsFixed(0) : x.toStringAsFixed(2); }

            // -------- Excel load --------
            Future<void> _pickExcel() async{
              try{
                setState(()=>{_excel=null,_headers=[],_table=[],_colText=null,_colCTR=null,_colPos=null,_benchmarks=[],_bmFromSheet=false,_results=[],_bmSheetName=null});
                final res=await FilePicker.platform.pickFiles(type:FileType.custom,allowedExtensions:['xlsx'],withData:true);
                if(res==null||res.files.isEmpty) return;
                final bytes=res.files.single.bytes; if(bytes==null){ _snack('Failed to read file bytes'); return; }
                final excel = xls.Excel.decodeBytes(bytes); setState(()=>_excel=excel);

                final names=excel.tables.keys.toList();
                final chosen=names.firstWhere((t)=>(excel.tables[t]?.maxRows??0)>0,orElse:()=>names.isNotEmpty?names.first:'');
                if(chosen.isEmpty){ _snack('No sheets found'); return; }
                _dataSheetName = chosen;

                _loadTable(); _loadBenchmarks(excel); _autoMap();
              } catch(e){ _snack('Excel load error: $e'); }
            }

            void _loadTable(){
              final sh=_excel!.tables[_dataSheetName]!; _headers=[]; _table=[];
              for(var r=0;r<sh.maxRows;r++){
                final row=<String>[];
                for(var c=0;c<sh.maxCols;c++){
                  final cell = sh.cell(xls.CellIndex.indexByColumnRow(columnIndex:c,rowIndex:r)).value;
                  row.add('${cell??''}'.trim());
                }
                if(r==0) _headers=row; else _table.add(row);
              }
            }

            void _loadBenchmarks(xls.Excel excel){
              _bmFromSheet=false; final bm=excel.tables['Benchmarks'];
              if(bm==null||bm.maxRows<2){ _benchmarks=[]; _bmSheetName=null; return; }
              final rows=bm.maxRows, cols=bm.maxCols; final list=<Benchmark>[];
              for(var r=1;r<rows;r++){
                String a='',b='',c='',d='';
                if(cols>0)a='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:0,rowIndex:r)).value??''}';
                if(cols>1)b='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:1,rowIndex:r)).value??''}';
                if(cols>2)c='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:2,rowIndex:r)).value??''}';
                if(cols>3)d='${bm.cell(xls.CellIndex.indexByColumnRow(columnIndex:3,rowIndex:r)).value??''}';
                final fp=_num(a), tp=_num(b), mn=_num(c), mx=_num(d);
                if(fp.isNaN||tp.isNaN||mn.isNaN||mx.isNaN) continue;
                list.add(Benchmark(fp,tp,mn,mx));
              }
              if(list.isNotEmpty){ _benchmarks=list; _bmFromSheet=true; _bmSheetName='Benchmarks (same workbook)'; }
            }

            void _autoMap(){
              int? find(List<String> keys){ for(var i=0;i<_headers.length;i++){ final h=_headers[i].toLowerCase(); for(final k in keys){ if(h.contains(k)) return i; } } return null; }
              _colText = find(['url','address','page','landing','slug','title']) ?? 0;
              _colCTR  = find(['ctr','click-through','clickthrough']) ?? (_headers.length>1?1:null);
              _colPos  = find(['position','avg position','rank']) ?? (_headers.length>2?2:null);
              setState((){});
            }

            // -------- Validation + compute --------
            List<String> _validateData() {
              final issues = <String>[];
              if (_headers.isEmpty) issues.add('No data sheet loaded.');
              if (_colText == null || _colCTR == null || _colPos == null) {
                issues.add('Please map all three columns (Text/CTR/Position).'); 
                return issues;
              }
              var badCtr = 0, badPos = 0;
              for (var i = 0; i < _table.length; i++) {
                final row = _table[i];
                final t = _colText! < row.length ? row[_colText!] : '';
                final c = _colCTR!  < row.length ? row[_colCTR!]  : '';
                final p = _colPos!  < row.length ? row[_colPos!]  : '';
                final ctr = _ctr(c), pos = _num(p);
                if (t.trim().isEmpty) issues.add('Row ${i+2}: empty Text/URL');
                if (ctr.isNaN) badCtr++; if (pos.isNaN) badPos++;
              }
              if (badCtr > 0) issues.add('Invalid CTR in $badCtr row(s).');
              if (badPos > 0) issues.add('Invalid Position in $badPos row(s).');
              if (_benchmarks.isEmpty) issues.add('Benchmarks are missing. Add a "Benchmarks" sheet.');
              return issues;
            }

            void _showIssues(List<String> issues){
              showDialog(context: context, builder: (_){
                return Directionality(textDirection: TextDirection.rtl, child: AlertDialog(
                  title: const Text('ایرادهای داده'),
                  content: SizedBox(width:480,child: SingleChildScrollView(
                    child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: issues.map((e)=>Text('• $e')).toList(),)
                  )),
                  actions:[TextButton(onPressed: ()=>Navigator.pop(context), child: const Text('باشه'))],
                ));
              });
            }

            // classify with 5 bands
            ColorClass _classify(double ctr, Benchmark bm){
              final tol = _tolerance; final minT=bm.minCTR, maxT=bm.maxCTR;
              final minStrong = minT * (1 - tol);
              final maxStrong = maxT * (1 + tol);
              if (ctr < minStrong) return ColorClass.redStrong;
              if (ctr < minT)     return ColorClass.redLight;
              if (ctr <= maxT)    return ColorClass.gray;
              if (ctr <= maxStrong) return ColorClass.greenLight;
              return ColorClass.greenStrong;
            }

            void _compute(){
              final issues = _validateData();
              if (issues.isNotEmpty){ _showIssues(issues); return; }
              final out=<ResultRow>[];
              for(var i=0;i<_table.length;i++){
                final row=_table[i]; if(_colText!>=row.length||_colCTR!>=row.length||_colPos!>=row.length) continue;
                final text=row[_colText!], cRaw=row[_colCTR!], pRaw=row[_colPos!];
                final c=_ctr(cRaw), p=_num(pRaw);
                if(c.isNaN||p.isNaN){ out.add(ResultRow(PageRow(text:text,ctrRaw:cRaw,posRaw:pRaw,rowIndex:i+1),ColorClass.warn,null)); continue; }
                final bm=_benchmarks.firstWhereOrNull((b)=>p>=b.fromPos&&p<=b.toPos);
                if(bm==null){ out.add(ResultRow(PageRow(text:text,ctrRaw:cRaw,posRaw:pRaw,rowIndex:i+1),ColorClass.warn,null)); continue; }
                out.add(ResultRow(PageRow(text:text,ctrRaw:cRaw,posRaw:pRaw,rowIndex:i+1),_classify(c,bm),bm));
              }
              setState(()=>_results=out);
            }

            // ---------- Optional AI: per-page only ----------
            Future<void> _analyzeOne(ResultRow r) async {
              final String aiUrl = (_customAiUrl?.isNotEmpty==true) ? _customAiUrl! : kAiProxyUrl;
              if (!aiUrl.startsWith('http')) { _snack('AI endpoint is not configured.'); return; }

              final c=_ctr(r.row.ctrRaw), p=_num(r.row.posRaw);
              final payload = {
                "mode":"single",
                "meta":{"datasetName": _dataSheetName ?? "dataset"},
                "settings":{"tolerance": _tolerance},
                "benchmarks": r.bm==null?[]:[{"from":r.bm!.fromPos,"to":r.bm!.toPos,"min":r.bm!.minCTR,"max":r.bm!.maxCTR}],
                "page":{"url": r.row.text, "posRaw": r.row.posRaw, "ctrRaw": r.row.ctrRaw, "pos": p, "ctr": c}
              };

              showDialog(context: context, barrierDismissible: false, builder: (_)=>const Center(child:CircularProgressIndicator()));
              String? lastErr;
              try{
                final res = await http.post(Uri.parse(aiUrl), headers:{'Content-Type':'application/json'}, body: jsonEncode(payload)).timeout(const Duration(seconds:60));
                if(res.statusCode==200){
                  final raw = jsonDecode(res.body);
                  final text = (raw is Map && raw["summaryText"] is String) ? raw["summaryText"] as String : '';
                  Navigator.of(context).pop();
                  _showAiSheet(title:'تحلیل صفحه', text:text.isEmpty?'—':text);
                  return;
                }else{ lastErr='AI HTTP ${res.statusCode}: ${res.body}'; }
              }catch(e){ lastErr='Network/timeout: $e'; }
              if(mounted){ Navigator.of(context).pop(); _snack(lastErr ?? 'AI request failed.'); }
            }

            void _showAiSheet({required String title, required String text}){
              showModalBottomSheet(context: context, isScrollControlled: true, builder: (_){
                return Directionality(textDirection: TextDirection.rtl, child: Padding(
                  padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: DraggableScrollableSheet(
                    expand: false,
                    initialChildSize: 0.7,
                    minChildSize: 0.5,
                    maxChildSize: 0.95,
                    builder: (_,ctrl)=>Container(
                      padding: const EdgeInsets.fromLTRB(16,12,16,16),
                      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                        Row(children:[Expanded(child: Text(title, style: Theme.of(context).textTheme.titleLarge)), IconButton(onPressed: ()=>Navigator.pop(context), icon: const Icon(Icons.close))]),
                        const Divider(),
                        Expanded(child: SingleChildScrollView(controller: ctrl, child: SelectableText(text, textAlign: TextAlign.justify))),
                        const SizedBox(height:8),
                        Row(mainAxisAlignment: MainAxisAlignment.end, children: [
                          TextButton.icon(onPressed: () async{
                            final bytes = Uint8List.fromList(utf8.encode(text));
                            await Share.shareXFiles([XFile.fromData(bytes, name:'page_analysis.txt', mimeType:'text/plain')], text:'AI analysis');
                          }, icon: const Icon(Icons.ios_share), label: const Text('اشتراک')),
                        ])
                      ]),
                    ),
                  ),
                ));
              });
            }

            // -------- Helpers --------
            void _snack(String m)=>ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(m)));

            // Filters & sorting
            List<ResultRow> get _visible {
              var list = _results.where((r){
                final matchQuery = _query.isEmpty || r.row.text.toLowerCase().contains(_query.toLowerCase());
                final matchBand  = _filterBands.isEmpty || _filterBands.contains(r.colorClass);
                return matchQuery && matchBand;
              }).toList();

              list.sort((a,b){
                final ca=_ctr(a.row.ctrRaw), cb=_ctr(b.row.ctrRaw);
                final pa=_num(a.row.posRaw), pb=_num(b.row.posRaw);
                switch(_sort){
                  case 'posAsc':  return pa.compareTo(pb);
                  case 'posDesc': return pb.compareTo(pa);
                  case 'ctrAsc':  return ca.compareTo(cb);
                  case 'ctrDesc': return cb.compareTo(ca);
                }
                return 0;
              });
              return list;
            }

            Color _bandColor(ColorClass c){
              switch(c){
                case ColorClass.redStrong:   return Colors.red.shade200;
                case ColorClass.redLight:    return Colors.red.shade100;
                case ColorClass.gray:        return Colors.grey.shade300;
                case ColorClass.greenLight:  return const Color(0xFFB7E4C7);
                case ColorClass.greenStrong: return const Color(0xFF9BE7C4);
                case ColorClass.warn:        return const Color(0xFFFFEBA0);
              }
            }

            @override Widget build(BuildContext context){
              final rS=_results.where((r)=>r.colorClass==ColorClass.redStrong).length;
              final rL=_results.where((r)=>r.colorClass==ColorClass.redLight).length;
              final gL=_results.where((r)=>r.colorClass==ColorClass.greenLight).length;
              final gS=_results.where((r)=>r.colorClass==ColorClass.greenStrong).length;
              final gr=_results.where((r)=>r.colorClass==ColorClass.gray).length;
              final wn=_results.where((r)=>r.colorClass==ColorClass.warn).length;

              return Scaffold(
                appBar: AppBar(
                  title: const Text('CTR Color App'),
                  actions: [
                    IconButton(onPressed:_openSettings, icon: const Icon(Icons.settings)),
                  ],
                ),
                body: Padding(
                  padding: const EdgeInsets.all(12),
                  child: ListView(children:[
                    // import & compute
                    Row(children: [
                      ElevatedButton.icon(onPressed:_pickExcel,icon:const Icon(Icons.upload_file),label:const Text('Import Excel (.xlsx)')),
                      const SizedBox(width:12),
                      ElevatedButton.icon(onPressed:_compute,icon:const Icon(Icons.color_lens),label:const Text('Compute Colors')),
                    ]),
                    const SizedBox(height:12),

                    // search + sort
                    Row(children:[
                      Expanded(child: TextField(
                        decoration: const InputDecoration(prefixIcon: Icon(Icons.search), hintText: 'جستجو در URL/Title', border: OutlineInputBorder()),
                        onChanged:(v)=>setState(()=>_query=v),
                      )),
                      const SizedBox(width:12),
                      DropdownButton<String>(
                        value: _sort,
                        items: const [
                          DropdownMenuItem(value:'posAsc', child: Text('Pos ↑')),
                          DropdownMenuItem(value:'posDesc', child: Text('Pos ↓')),
                          DropdownMenuItem(value:'ctrAsc', child: Text('CTR ↑')),
                          DropdownMenuItem(value:'ctrDesc', child: Text('CTR ↓')),
                        ],
                        onChanged:(v)=>setState(()=>_sort=v??'posAsc'),
                      ),
                    ]),
                    const SizedBox(height:10),

                    // filter chips
                    Wrap(spacing:8, children: [
                      _filterChip('Red★', ColorClass.redStrong, Colors.red.shade700),
                      _filterChip('Red',  ColorClass.redLight,  Colors.red.shade300),
                      _filterChip('Gray', ColorClass.gray,      Colors.grey),
                      _filterChip('Green',ColorClass.greenLight,const Color(0xFF66CC99)),
                      _filterChip('Green★',ColorClass.greenStrong,const Color(0xFF00B050)),
                      _filterChip('Warn', ColorClass.warn, const Color(0xFFFFE082)),
                    ]),
                    const SizedBox(height:8),

                    // band counts
                    Wrap(spacing:8, children:[
                      _countChip('Red★',rS,Colors.red.shade700),
                      _countChip('Red',rL,Colors.red.shade300),
                      _countChip('Gray',gr,Colors.grey),
                      _countChip('Green',gL,const Color(0xFF66CC99)),
                      _countChip('Green★',gS,const Color(0xFF00B050)),
                      _countChip('Warn',wn,const Color(0xFFFFE082)),
                    ]),

                    const SizedBox(height:8),

                    // list
                    if(_results.isEmpty) const Padding(
                      padding: EdgeInsets.only(top:24),
                      child: Center(child: Text('ابتدا فایل اکسل را وارد و Compute را اجرا کنید.')),
                    ),
                    if(_results.isNotEmpty) ListView.builder(
                      shrinkWrap:true, physics:const NeverScrollableScrollPhysics(),
                      itemCount:_visible.length,
                      itemBuilder:(ctx,i){
                        final r=_visible[i];
                        final bg=_bandColor(r.colorClass);
                        final c=_ctr(r.row.ctrRaw), p=_num(r.row.posRaw);
                        return Card(color:bg, child: ListTile(
                          title: Text(r.row.text, maxLines:2, overflow: TextOverflow.ellipsis),
                          subtitle: Text('CTR: ${_fmt(c)}   |   Position: ${_fmt(p)}'),
                          trailing: Wrap(spacing:6, children: [
                            IconButton(tooltip:'بازکردن', icon: const Icon(Icons.open_in_new), onPressed: () async{
                              final uri = Uri.tryParse(r.row.text);
                              if(uri!=null) await launchUrl(uri, mode: LaunchMode.externalApplication);
                            }),
                            IconButton(tooltip:'کپی', icon: const Icon(Icons.copy), onPressed: (){
                              Share.share(r.row.text);
                            }),
                            IconButton(tooltip:'تحلیل', icon: const Icon(Icons.insights), onPressed: ()=>_analyzeOne(r)),
                          ]),
                        ));
                      }
                    ),
                    const SizedBox(height:12),
                    Text('Tolerance: ${(_tolerance*100).toStringAsFixed(0)}%'),
                  ]),
                ),
              );
            }

            // UI helpers (chips & settings)
            Widget _countChip(String label,int count,Color c)=>Chip(
              label: Text('$label: $count'),
              backgroundColor: c.withOpacity(0.18),
              shape: const StadiumBorder(side: BorderSide(color: Colors.black12)),
            );

            Widget _filterChip(String label, ColorClass band, Color c){
              final sel = _filterBands.contains(band);
              return FilterChip(
                selected: sel,
                label: Text(label),
                onSelected: (v){ setState(()=> v ? _filterBands.add(band) : _filterBands.remove(band)); },
                selectedColor: c.withOpacity(0.25),
              );
            }

            void _openSettings(){
              final ctrl = TextEditingController(text: _customAiUrl ?? '');
              showDialog(context: context, builder: (_){
                return Directionality(textDirection: TextDirection.rtl, child: AlertDialog(
                  title: const Text('تنظیمات'),
                  content: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [
                    const Text('آدرس سرویس هوش مصنوعی (خالی = پیش‌فرض):'),
                    const SizedBox(height:8),
                    TextField(controller: ctrl, decoration: const InputDecoration(border: OutlineInputBorder(), hintText:'https://your-proxy.vercel.app/api/analyze')),
                    const SizedBox(height:12),
                    Text('تلورانس (۰ تا ۵۰٪)', style: const TextStyle(fontSize: 12)),
                    StatefulBuilder(builder: (ctx, setS){
                      return Column(children: [
                        Slider(value: _tolerance, min:0, max:0.5, divisions:50, label:'${(_tolerance*100).toStringAsFixed(0)}%', onChanged:(v)=> setS(()=>_tolerance=v)),
                        Text('Tolerance: ${(_tolerance*100).toStringAsFixed(0)}%'),
                      ]);
                    }),
                  ]),
                  actions: [
                    TextButton(onPressed: ()=>Navigator.pop(context), child: const Text('انصراف')),
                    TextButton(onPressed: () async {
                      final sp=await SharedPreferences.getInstance();
                      final v=ctrl.text.trim();
                      if(v.isEmpty){ await sp.remove(_kPrefsAiUrl); setState(()=>_customAiUrl=null); }
                      else { await sp.setString(_kPrefsAiUrl, v); setState(()=>_customAiUrl=v); }
                      await sp.setDouble(_kPrefsTol, _tolerance);
                      if(mounted) setState((){});
                      Navigator.pop(context);
                    }, child: const Text('ذخیره'))
                  ],
                ));
              });
            }
          }

          class ListToCsvConverter{ const ListToCsvConverter(); String convert(List<List<String>> rows){ final b=StringBuffer(); for(final r in rows){ b.writeln(r.map(_e).join(',')); } return b.toString(); }
            String _e(String s){ final n=s.contains(',')||s.contains('"')||s.contains('\\n')||s.contains('\\r'); if(!n) return s; final esc=s.replaceAll('"','""'); return '"$esc"'; } }
          DART

      - name: Inject AI URL safely
        env:
          AI_PROXY_URL: ${{ secrets.AI_PROXY_URL }}
        run: |
          URL="${AI_PROXY_URL}"
          URL_ESC=$(printf '%s' "$URL" | sed -e 's/[\/&]/\\&/g')
          sed -i "s|__AI_PROXY_URL__|$URL_ESC|g" app/lib/main.dart
          echo "Injected URL: ${URL:-<empty>}"

      - name: Ensure INTERNET permission
        run: |
          MANIFEST=app/android/app/src/main/AndroidManifest.xml
          grep -q 'android.permission.INTERNET' "$MANIFEST" || \
            sed -i 's|<application|<uses-permission android:name="android.permission.INTERNET"/>\n    <application|g' "$MANIFEST"

      - name: Bump Kotlin plugin version
        run: |
          sed -i "s/id 'org.jetbrains.kotlin.android' version '[^']*'/id 'org.jetbrains.kotlin.android' version '1.8.22'/g" app/android/build.gradle

      - name: Force kotlin stdlib versions
        run: |
          cat >> app/android/app/build.gradle <<'GRADLE'
          configurations.all {
            resolutionStrategy {
              force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
              force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22'
              force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
            }
          }
          GRADLE

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: true

      - name: Gradle warmup (retry)
        working-directory: app/android
        run: |
          for i in 1 2 3; do
            ./gradlew --no-daemon help && break || sleep 20
          done

      - name: Flutter pub get
        working-directory: app
        run: flutter pub get

      - name: Build APK (release) with retry
        working-directory: app
        run: |
          for i in 1 2 3; do
            flutter build apk --release && break || sleep 20
          done

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: app/build/app/outputs/flutter-apk/app-release.apk
